name: Test Bash Script

on: [push]

jobs:
  test-script:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Validate MI Version
        run: |
          function version_gt() {
            local ref_version="$1"
            local input_version="$2"
            
            # Split the versions into arrays using dot as the delimiter
            IFS='.' read -ra ref_version_parts <<< "$ref_version"
            IFS='.' read -ra input_version_parts <<< "$input_version"
            
            # Compare each part of the version
            for i in "${!ref_version_parts[@]}"; do
              if [[ ${input_version_parts[$i]} -gt ${ref_version_parts[$i]} ]]; then
                return 0
              elif [[ ${input_version_parts[$i]} -lt ${ref_version_parts[$i]} ]]; then
                return 1
              fi
            done
            
            # If all parts are equal, input version is not greater
            return 0
          }

          subpath="."
          minimumRuntimeVersion="4.2.0.70"

          # Check if the pom.xml file exists in the subpath
          if [ -e "$subpath/pom.xml" ]; then
            # Extract project.runtime.version tag value
            runtime_version=$(grep '<project.runtime.version>' "$subpath/pom.xml" | sed -e 's/.*<project.runtime.version>\([^<]*\)<\/project.runtime.version>.*/\1/')
            
            # Check if project.runtime.version tag is not empty
            if [ -z "$runtime_version" ]; then
              echo "Error: <project.runtime.version> is not found or is empty."
              exit 1
            fi
            
            # Validate if the version is greater than minimumRuntimeVersion
            if version_gt "$minimumRuntimeVersion" "$runtime_version"; then
              echo "Success: project has a valid runtime version."
              exit 0
            else
              echo "Error: runtime version in the project version ($runtime_version) is older than the minimum runtime version ($minimumRuntimeVersion)."
              exit 1
            fi
          else
            echo "Error: pom.xml file is not found."
            exit 1
          fi

      - name: Run Bash script
        run: |
          #!/bin/bash

          count=0
          valid_count=0
          empty_value_count=0
          zip_files_exist=false
          car_file_path="."

          # Create temp_folder if it doesn't exist
          mkdir -p temp_folder

          shopt -s nullglob  # Enable nullglob to handle case with no zip files
          for car_file in ${car_file_path}/*.car; do
              zip_files_exist=true

              # Move the car file to temp_folder and rename it to .zip
              mv "$car_file" "temp_folder/temp.zip"

              # Unzip the file
              unzip -o "temp_folder/temp.zip" -d temp_folder > /dev/null 2>&1

              # Check if metadata.xml exists in the unzipped folder
              if [ -e "temp_folder/metadata.xml" ]; then
                  count=$((count+1))
                  # Check if mainSequence="..." attribute exists and has a non-empty value
                  if grep -q 'mainSequence="[^"]*"' "temp_folder/metadata.xml"; then
                      main_sequence_value=$(grep -o 'mainSequence="[^"]*"' "temp_folder/metadata.xml" | cut -d '"' -f 2)
                      if [ -z "$main_sequence_value" ]; then
                          empty_value_count=$((empty_value_count+1))
                      elif [ -n "$main_sequence_value" ]; then
                          valid_count=$((valid_count+1))
                      fi
                  fi
              fi

              # Remove the contents of the temporary folder
              rm -rf temp_folder/*
          done

          if ! $zip_files_exist; then
              echo "Error: no .car files found in the directory."
              exit 1
          elif [ "$count" -eq 0 ]; then
              echo "Error: no metadata.xml file found in any .car file."
              exit 1
          elif [ "$valid_count" -eq 1 ] && [ "$empty_value_count" -eq 0 ]; then
              echo "Success: one valid metadata.xml file found with a valid mainSequence attribute."
              exit 0
          elif [ "$valid_count" -gt 1 ]; then
              echo "Error: found $valid_count metadata.xml files with a valid mainSequence attribute, but only one is allowed."
              exit 1
          elif [ "$empty_value_count" -ge 1 ]; then
              echo "Error: found $empty_value_count metadata.xml file(s) with an empty mainSequence attribute."
              exit 1
          else
              echo "Error: found $count metadata.xml files, but none of them have a valid mainSequence attribute."
              exit 1
          fi
          exit 1
